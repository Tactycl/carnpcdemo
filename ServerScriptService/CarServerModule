-- Services

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Variables

local VehiclesFolder = workspace:FindFirstChild("Vehicles") or Instance.new("Folder")
VehiclesFolder.Name = "Vehicles"

local FloorRayParams = RaycastParams.new()
FloorRayParams.FilterDescendantsInstances = {VehiclesFolder}
FloorRayParams.IgnoreWater = true
FloorRayParams.RespectCanCollide = true
FloorRayParams.CollisionGroup = "Wheel"

local serverModule = {}
serverModule.__index = serverModule

-- Runtime

function initVehicle(Vehicle)
	Vehicle.PrimaryPart = Vehicle.Base.Base
	
	local Folder = Instance.new("Folder", Vehicle.Base.Base)
	Folder.Name = "WELDS"

	local extentsCFrame, extentsSize = Vehicle:GetBoundingBox()
	local hitbox = Instance.new("Part", Vehicle.Base)
	hitbox.Size = extentsSize
	hitbox.CFrame = extentsCFrame
	hitbox.Transparency = 1
	hitbox.Name = "CarHitbox"
	hitbox.Color = Color3.new(1, 0, 0)
	hitbox.Massless = true
	hitbox.CanCollide = false
	hitbox.CollisionGroup = "CarHitbox"
	hitbox:AddTag("CarHitbox")

	local TireSmokePrefab = Vehicle.Prefabs:FindFirstChild("TireSmoke")
	local ScreechPrefab = Vehicle.Prefabs:FindFirstChild("Screech")

	local function WeldPart(part, adornee)
		local weld = Instance.new("WeldConstraint", Folder)
		weld.Part0 = adornee or Vehicle.Base.Base
		weld.Part1 = part
		weld.Name = part.Name
	end

	WeldPart(hitbox)
	for _, v in Vehicle.Decoration:GetDescendants() do
		if not v:IsA("BasePart") then continue end
		WeldPart(v)
	end
	local outerDecoration = Vehicle.Decoration:FindFirstChild("Outer")
	if outerDecoration then
		for _, obj in outerDecoration:GetDescendants() do
			if not obj:IsA("BasePart") then continue end
			obj.CollisionGroup = "CarHitbox"
			obj.CanCollide = true
			obj.CanQuery = false
			obj.CanTouch = false
		end
	end

	for _, item in Vehicle.Misc:GetChildren() do
		if item:GetAttribute("WeldToBase") == false then continue end
		for _, obj in item:GetDescendants() do
			if not obj:IsA("BasePart") then continue end
			WeldPart(obj)
		end
	end
	
	if Vehicle.Misc:FindFirstChild("Hitbox") then
		for _, v in Vehicle.Misc.Hitbox:GetDescendants() do
			if not v:IsA("BasePart") then continue end
			v.CollisionGroup = "Car"
			v.Massless = true
		end
	end

	for _, wheel in Vehicle.Base.Wheels:GetChildren() do
		if not wheel:IsA("BasePart") then continue end
		wheel.CollisionGroup = "Wheel"

		local correspondingAttachment = Vehicle.Base.Base:FindFirstChild(wheel.Name)
		if not correspondingAttachment then continue end

		if TireSmokePrefab then TireSmokePrefab.Rate = 0 TireSmokePrefab:Clone().Parent = wheel end
		if ScreechPrefab then ScreechPrefab.Volume = 0 ScreechPrefab:Clone().Parent = wheel end

		local Parts = wheel:FindFirstChild("Parts")
		local Fixed = wheel:FindFirstChild("Fixed")

		if Parts then
			for _, part in Parts:GetDescendants() do
				if not part:IsA("BasePart") then continue end
				WeldPart(part, wheel)
			end
		end

		if not Fixed then continue end

		local aX, aY, aZ = correspondingAttachment.WorldCFrame:ToOrientation()

		local Part = Instance.new("Part", Fixed)
		Fixed.PrimaryPart = Part
		Part.CanCollide = false
		Part.CanTouch = false
		Part.CanQuery = false
		Part.Transparency	= 1
		Part.Size = Vector3.one
		Part.CFrame = CFrame.new(wheel.Attachment.WorldPosition) * CFrame.fromOrientation(aX, aY, aZ)

		local a0 = Instance.new("Attachment", Part)
		a0.Position = Vector3.new(-wheel.Size.Y/2+.05, wheel.Size.X/2, 0)

		local a1 = Instance.new("Attachment", Part)
		a1.Position = Vector3.new(-wheel.Size.Y/2+.05, -wheel.Size.X/2, 0)

		local trail = Instance.new("Trail", Part)
		trail.Color = ColorSequence.new(Color3.new(0, 0, 0))
		trail.Texture = "rbxassetid://205806478"
		trail.TextureLength = 4
		trail.TextureMode = Enum.TextureMode.Static
		trail.Lifetime = 25
		trail.Transparency = NumberSequence.new(.9, 1)
		trail.Attachment0 = a0
		trail.Attachment1 = a1
		trail.Enabled = false

		local otherAttachment = Instance.new("Attachment", Vehicle.Base.Base)
		otherAttachment.Name = "FixedAttachment" .. wheel.Name
		otherAttachment.WorldCFrame = Part.CFrame

		local attachment = Instance.new("Attachment", Part)
		attachment.Name = "FixedAttachment"

		local rigidConstraint = Instance.new("RigidConstraint", Part)
		rigidConstraint.Attachment0 = attachment
		rigidConstraint.Attachment1 = otherAttachment

		for _, part in Fixed:GetDescendants() do
			if part:IsA("BasePart") then
				WeldPart(part, Part)
			end
		end
	end

	local SW = Vehicle.Misc:FindFirstChild("SteeringWheel") or Vehicle.Misc:FindFirstChild("SW")
	if SW and SW.PrimaryPart ~= nil then
		for _, obj in SW:GetDescendants() do
			if obj:IsA("BasePart") and obj ~= SW.PrimaryPart then
				WeldPart(obj, SW.PrimaryPart)
			end
		end

		local newAttachment = Instance.new("Attachment", Vehicle.Base.Base)
		newAttachment.Name = "SWAttachment"
		newAttachment.WorldCFrame = SW.PrimaryPart.Base.WorldCFrame
		newAttachment:SetAttribute("originalCFrame", newAttachment.CFrame)

		local rigid = Instance.new("RigidConstraint", SW.PrimaryPart)
		rigid.Attachment0 = newAttachment
		rigid.Attachment1 = SW.PrimaryPart.Base
	end

	WeldPart(Vehicle.Base.Seat)
	WeldPart(Vehicle.Base.Engine)

	for _, attachment in Vehicle.Base.Base:GetChildren() do
		if not attachment:IsA("Attachment") then continue end
		attachment:SetAttribute("originalCFrame", attachment.CFrame)
	end

	for _, obj in Vehicle:GetDescendants() do
		if not obj:IsA("BasePart") then continue end
		obj.Anchored = false
	end
end

function serverModule:ChangedOccupant()
	local success, errorMessage = pcall(function()
		local occupant = self.Vehicle.Base.Seat.Occupant
		if occupant then
			local character = occupant.Parent
			local player = Players:GetPlayerFromCharacter(character)
			if not player then return end

			for _, obj in self.Vehicle:GetDescendants() do
				if not obj:IsA("BasePart") then continue end
				obj:SetNetworkOwner(player)
			end

			local SW = self.Vehicle.Misc:FindFirstChild("SteeringWheel") or self.Vehicle.Misc:FindFirstChild("SW")
			if SW and SW.PrimaryPart then
				local Left = SW.PrimaryPart:FindFirstChild("LeftHand") or SW.PrimaryPart:FindFirstChild("Left")
				local Right = SW.PrimaryPart:FindFirstChild("RightHand") or SW.PrimaryPart:FindFirstChild("Right")
				local LeftPole = self.Vehicle.Base.Base:FindFirstChild("LeftPole")
				local RightPole = self.Vehicle.Base.Base:FindFirstChild("RightPole")

				if Left then
					self.oldIKL = Instance.new("IKControl", character.Humanoid)
					self.oldIKL.Name = "Left"
					self.oldIKL.EndEffector = character.LeftHand
					self.oldIKL.Target = Left
					self.oldIKL.ChainRoot = character.LeftUpperArm
					self.oldIKL.SmoothTime = 0.02
					self.oldIKL.Type = Enum.IKControlType.Position
					self.oldIKL.Pole = LeftPole
				end

				if Right then
					self.oldIKR = Instance.new("IKControl", character.Humanoid)
					self.oldIKR.Name = "Right"
					self.oldIKR.EndEffector = character.RightHand
					self.oldIKR.Target = Right
					self.oldIKR.ChainRoot = character.RightUpperArm
					self.oldIKR.SmoothTime = 0.02
					self.oldIKR.Type = Enum.IKControlType.Position
					self.oldIKR.Pole = RightPole
				end
			end

		else
			if self.oldIKL then self.oldIKL:Destroy() self.oldIKL = nil end
			if self.oldIKR then self.oldIKR:Destroy() self.oldIKR = nil end

			for _, obj in self.Vehicle:GetDescendants() do
				if not obj:IsA("BasePart") then continue end
				obj:SetNetworkOwner(nil)
			end

			for _, cylindrical in self.Vehicle.Base.Wheels.WheelCylindricals:GetChildren() do
				if not cylindrical:IsA("CylindricalConstraint") then continue end
				cylindrical.AngularVelocity = 0
				cylindrical.AngularActuatorType = Enum.ActuatorType.Motor
				cylindrical.MotorMaxTorque = self.config.HANDBRAKE_TORQUE
			end
		end
	end)
	if not success then
		warn(errorMessage)
	end
end

function serverModule.init(Vehicle)
	local self = setmetatable({}, serverModule)

	self.Vehicle = Vehicle
	self.config = require(self.Vehicle.Config)
	initVehicle(Vehicle)

	for _, obj in self.Vehicle:GetDescendants() do
		if not obj:IsA("BasePart") then continue end
		obj:SetNetworkOwner(nil)
	end
	
	for _, cylindrical in self.Vehicle.Base.Wheels.WheelCylindricals:GetChildren() do
		if not cylindrical:IsA("CylindricalConstraint") then continue end
		cylindrical.AngularActuatorType = Enum.ActuatorType.Motor
		cylindrical.AngularVelocity = 0
		cylindrical.MotorMaxTorque = 50000
	end

	self:ChangedOccupant()
	self.occupantSignal = self.Vehicle.Base.Seat:GetPropertyChangedSignal("Occupant"):Connect(function()
		self:ChangedOccupant()
	end)

	print("init car server", self.Vehicle.Name)
	return self
end

function serverModule:remove()
	if self.oldIKL then self.oldIKL:Destroy() self.oldIKL = nil end
	if self.oldIKR then self.oldIKR:Destroy() self.oldIKR = nil end
	
	self.occupantSignal:Disconnect()
	table.clear(self)
end

return serverModule
