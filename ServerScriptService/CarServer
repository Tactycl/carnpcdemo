-- Services

local ServerScriptService = game:GetService("ServerScriptService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- Variables

local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local Vehicles = workspace:WaitForChild("Vehicles")

local CarServerModule = require(ServerScriptService.CarServerModule)
local ServerConfigurations = {}

local vehicleDebounce = false

-- Runtime

for _, Vehicle in Vehicles:GetChildren() do
	ServerConfigurations[Vehicle] = CarServerModule.init(Vehicle)
end

Vehicles.ChildAdded:Connect(function(Vehicle)
	ServerConfigurations[Vehicle] = CarServerModule.init(Vehicle)
end)

Vehicles.ChildRemoved:Connect(function(Vehicle)
	if ServerConfigurations[Vehicle] then
		ServerConfigurations[Vehicle]:remove()
	end
end)

Remotes.CarBackfire.OnServerEvent:Connect(function(player)
	if vehicleDebounce then return end
	vehicleDebounce = true

	for _, plr2 in Players:GetPlayers() do
		if plr2 == player then continue end
		Remotes.CarBackfire:FireClient(plr2, player.UserId)
	end

	task.wait(1)
	vehicleDebounce = false
end)

Remotes.CarLights.OnServerEvent:Connect(function(player, lightName, lightActive)
	if vehicleDebounce then return end
	vehicleDebounce = true

	for _, plr2 in Players:GetPlayers() do
		if plr2 == player then continue end
		Remotes.CarLights:FireClient(plr2, player.UserId, lightName, lightActive)
	end

	task.wait(1)
	vehicleDebounce = false
end)
