-- Services

local Players = game:GetService("Players")
local DataStoreService = game:GetService("DataStoreService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local PlayerData = DataStoreService:GetDataStore("Data", "Player")

-- Variables

local Remotes = ReplicatedStorage.Remotes
local DEFAULT_CAR = "Ferrari FXXK"
local Settings = { -- {name, category, type, standard value, (number)min, (number)max}
	-- General
	{"Manual Transmission", "General", "boolean", 0},
	{"Sensitivity", "General", "number", 100, 1, 100},
	{"NPC Render Distance", "General", "number", 400, 50, 1000},
	
	-- Sound
	{"Radio Volume", "Sound", "number", 100, 0, 100},
	{"Engine Volume", "Sound", "number", 100, 0, 100},
	{"Tire Screech Volume", "Sound", "number", 100, 0, 100},
	{"Backfire Volume", "Sound", "number", 100, 0, 100},
	
	-- Keybinds
	{"Shift Up", "Keybinds", "keyinput", Enum.KeyCode.E.Value},
	{"Shift Down", "Keybinds", "keyinput", Enum.KeyCode.Q.Value},
	{"Handbrake", "Keybinds", "keyinput", Enum.KeyCode.Space.Value},
	{"Flip Car", "Keybinds", "keyinput", Enum.KeyCode.X.Value},
	{"Switch Radio Channel", "Keybinds", "keyinput", Enum.KeyCode.V.Value},
}

-- Runtime

function GetData(x)
	local data = nil
	
	repeat
		local success, errorMsg = pcall(function()
			data = PlayerData:GetAsync(x.UserId)
		end)
		
		if not success then
			warn("Couldn't fetch data because: ", errorMsg, ", retrying.")
		end
		task.wait(1)
	until success
	
	return data
end

function SaveData(x)
	local data = {
		Settings = {},
		Cars = {},
	}
	RemoveVehicleOfPlayer(x)

	for _, setting in x.Settings:GetChildren() do
		local value = setting.Value

		if typeof(value) == "boolean" then
			value = value == true and 1 or 0
		end

		data.Settings[setting.Name] = value
	end

	for _, car in x.Cars:GetChildren() do
		table.insert(data.Cars, {
			Name = car.Name,
			Modifcations = nil,
			isEquipped = car.Value and 1 or 0,
		})
	end

	repeat
		local success, errorMsg = pcall(function()
			PlayerData:SetAsync(x.UserId, data)
		end)
		
		if not success then
			warn("Couldn't save because: ", errorMsg, ", retrying.")
		end
		task.wait(1)
	until success
end

function RemoveVehicleOfPlayer(x)
	for _, vehicle in workspace.Vehicles:GetChildren() do
		if not vehicle:FindFirstChild("Owner") then continue end
		if vehicle.Owner.Value ~= x then continue end
		vehicle:Destroy()
	end
end

function LoadInPlayer(x)
	local character = x.Character or x.CharacterAdded:Wait()
	local carsFolder = x.Cars
	local equippedValue = nil

	RemoveVehicleOfPlayer(x)
	for _, obj in carsFolder:GetChildren() do
		if obj.Value ~= true then continue end
		equippedValue = obj
		break
	end
	for _, obj in character:GetDescendants() do
		if not obj:IsA("BasePart") then continue end
		obj.Transparency = 1
		obj.CollisionGroup = "Player"
	end

	if equippedValue then
		local car = ReplicatedStorage.Vehicles:FindFirstChild(equippedValue.Name)
		if car then
			car = car:Clone()
			car:PivotTo(workspace.Spawn.CFrame + Vector3.new(0, 10, 0))
			car.Parent = workspace.Vehicles

			local object = Instance.new("ObjectValue", car)
			object.Name = "Owner"
			object.Value = x

			car.Base.Seat:Sit(character:WaitForChild("Humanoid"))
		end

	else
		warn("Failed to load in", x.Name, ", kicking for security")
		x:Kick("Security Kick, Couldn't load in your car. Contact the devs if this continues.")
	end
end

function GetElementInTable(t, n, ...)
	local vars = {...}
	local current = t

	for i = 1, #vars do
		local var = vars[i]
		current = current[var]
		if not current then return n end
	end

	return current
end

function LoadPlayerData(x)
	local Data = GetData(x) or {}
	
	local settingsFolder = Instance.new("Folder")
	settingsFolder.Name = "Settings"

	local carsFolder = Instance.new("Folder")
	carsFolder.Name = "Cars"
	
	for order, settingData in Settings do
		local settingName = settingData[1]
		local settingCategory = settingData[2]
		local settingType = settingData[3]
		local defaultValue = settingData[4]
		local settingValue = GetElementInTable(Data, defaultValue, "Settings", settingName)
		local object = nil
		
		if settingType == "boolean" then
			settingValue = settingValue == 1
			defaultValue = defaultValue == 1
			object = Instance.new("BoolValue")
			
		elseif settingType == "number" then
			object = Instance.new("NumberValue")
			
		elseif settingType == "enum" then
			object = Instance.new("StringValue")
			
		elseif settingType == "keyinput" then
			object = Instance.new("IntValue")
		end
		
		if object then
			object.Name = settingName
			object.Value = settingValue
			object.Parent = settingsFolder
			
			object:SetAttribute("Order", order)
			object:SetAttribute("Type", settingType)
			object:SetAttribute("Category", settingCategory)
			object:SetAttribute("Default", defaultValue)
			object:SetAttribute("Min", settingData[5])
			object:SetAttribute("Max", settingData[6])
		end
	end

	local Cars = GetElementInTable(Data, {}, "Cars")
	if #Cars == 0 then
		table.insert(Cars, {
			Name = DEFAULT_CAR,
			Modifications = nil,
			isEquipped = 1,
		})
	end

	for _, carData in Cars do
		local carName = carData.Name
		local isEquipped = carData.isEquipped == 1

		local dir = Instance.new("BoolValue")
		dir.Value = isEquipped
		dir.Name = carName
		dir.Parent = carsFolder
	end

	settingsFolder.Parent = x
	carsFolder.Parent = x

	LoadInPlayer(x)
	x.CharacterAdded:Connect(function()
		LoadInPlayer(x)
	end)
end

Remotes.UpdateSettings.OnServerEvent:Connect(function(player, t)
	for settingName, settingValue in t do
		local foundSetting = player.Settings:FindFirstChild(settingName)
		if foundSetting then
			local sType = foundSetting:GetAttribute("Type")
			if ((sType == "keyinput" or sType == "enum") and typeof(settingValue) == "number") or typeof(settingValue) == sType then
				foundSetting.Value = settingValue
			end
		end
	end
	
	Remotes.UpdateSettings:FireClient(player)
end)

Players.PlayerAdded:Connect(LoadPlayerData)
Players.PlayerRemoving:Connect(SaveData)
game:BindToClose(function()
	for _, x in Players:GetPlayers() do
		task.spawn(SaveData, x)
	end
end)
